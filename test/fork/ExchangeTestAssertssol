// SPDX-License-Identifier: GPL-3.0-or-later
// solhint-disable func-name-mixedcase, var-name-mixedcase, state-visibility, const-name-snakecase, max-states-count
pragma solidity ^0.8;

import { Test } from "mento-std/Test.sol";
import { console } from "forge-std/console.sol";
import { ExchangeTestUtils } from "./ExchangeTestUtils.sol";

import { FixidityLib } from "celo/contracts/common/FixidityLib.sol";

import { IERC20 } from "contracts/interfaces/IERC20.sol";
import { IBreakerBox } from "contracts/interfaces/IBreakerBox.sol";
import { ITradingLimits } from "contracts/interfaces/ITradingLimits.sol";
import { IMedianDeltaBreaker } from "contracts/interfaces/IMedianDeltaBreaker.sol";
import { IValueDeltaBreaker } from "contracts/interfaces/IValueDeltaBreaker.sol";

contract ExchangeTestAsserts is Test {
  using ExchangeTestUtils for ITradingLimits.Config;
  using ExchangeTestUtils for ITradingLimits.State;
  using ExchangeTestUtils for uint8;
  using ExchangeTestUtils for uint256;
  using FixidityLib for FixidityLib.Fraction;

  uint8 private constant L0 = 1; // 0b001 Limit0
  uint8 private constant L1 = 2; // 0b010 Limit1
  uint8 private constant LG = 4; // 0b100 LimitGlobal

  uint256 fixed1 = FixidityLib.fixed1().unwrap();
  FixidityLib.Fraction pc10 = FixidityLib.newFixedFraction(10, 100);

  // ========================= Swap Asserts ========================= //

  function assert_swapIn(ExchangeForkTest ctx, address from, address to, uint256 sellAmount) internal {
    FixidityLib.Fraction memory rate = ctx.getReferenceRateFraction(from);
    FixidityLib.Fraction memory amountIn = sellAmount.toUnitsFixed(from);
    FixidityLib.Fraction memory amountOut = ctx.swapIn(from, to, sellAmount).toUnitsFixed(to);
    FixidityLib.Fraction memory expectedAmountOut = amountIn.divide(rate);

    assertApproxEqAbs(amountOut.unwrap(), expectedAmountOut.unwrap(), pc10.multiply(expectedAmountOut).unwrap());
  }

  function assert_swapOut(ExchangeForkTest ctx, address from, address to, uint256 buyAmount) internal {
    FixidityLib.Fraction memory rate = ctx.getReferenceRateFraction(from);
    FixidityLib.Fraction memory amountOut = buyAmount.toUnitsFixed(to);
    FixidityLib.Fraction memory amountIn = ctx.swapOut(from, to, buyAmount).toUnitsFixed(from);
    FixidityLib.Fraction memory expectedAmountIn = amountOut.multiply(rate);

    assertApproxEqAbs(amountIn.unwrap(), expectedAmountIn.unwrap(), pc10.multiply(expectedAmountIn).unwrap());
  }

  // ========================= Trading Limit Asserts ========================= //

  // ========================= Circuit Breaker Asserts ========================= //
}
