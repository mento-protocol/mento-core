/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBiPoolManager,
  IBiPoolManagerInterface,
} from "../IBiPoolManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newBroker",
        type: "address",
      },
    ],
    name: "BrokerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "exchangeId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bucket0",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bucket1",
        type: "uint256",
      },
    ],
    name: "BucketsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "exchangeId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "pricingModule",
        type: "address",
      },
    ],
    name: "ExchangeCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "exchangeId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset0",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "pricingModule",
        type: "address",
      },
    ],
    name: "ExchangeDestroyed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newReserve",
        type: "address",
      },
    ],
    name: "ReserveUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newSortedOracles",
        type: "address",
      },
    ],
    name: "SortedOraclesUpdated",
    type: "event",
  },
  {
    constant: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "asset0",
            type: "address",
          },
          {
            internalType: "address",
            name: "asset1",
            type: "address",
          },
          {
            internalType: "contract IPricingModule",
            name: "pricingModule",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bucket0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bucket1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastBucketUpdate",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                ],
                internalType: "struct FixidityLib.Fraction",
                name: "spread",
                type: "tuple",
              },
              {
                internalType: "address",
                name: "oracleReportTarget",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "referenceRateResetFrequency",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minimumReports",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stablePoolResetSize",
                type: "uint256",
              },
            ],
            internalType: "struct IBiPoolManager.PoolConfig",
            name: "config",
            type: "tuple",
          },
        ],
        internalType: "struct IBiPoolManager.PoolExchange",
        name: "exchange",
        type: "tuple",
      },
    ],
    name: "createExchange",
    outputs: [
      {
        internalType: "bytes32",
        name: "exchangeId",
        type: "bytes32",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "exchangeId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "exchangeIdIndex",
        type: "uint256",
      },
    ],
    name: "destroyExchange",
    outputs: [
      {
        internalType: "bool",
        name: "destroyed",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "getExchangeIds",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "exchangeIds",
        type: "bytes32[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "exchangeId",
        type: "bytes32",
      },
    ],
    name: "getPoolExchange",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "asset0",
            type: "address",
          },
          {
            internalType: "address",
            name: "asset1",
            type: "address",
          },
          {
            internalType: "contract IPricingModule",
            name: "pricingModule",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bucket0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "bucket1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastBucketUpdate",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                ],
                internalType: "struct FixidityLib.Fraction",
                name: "spread",
                type: "tuple",
              },
              {
                internalType: "address",
                name: "oracleReportTarget",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "referenceRateResetFrequency",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minimumReports",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "stablePoolResetSize",
                type: "uint256",
              },
            ],
            internalType: "struct IBiPoolManager.PoolConfig",
            name: "config",
            type: "tuple",
          },
        ],
        internalType: "struct IBiPoolManager.PoolExchange",
        name: "exchange",
        type: "tuple",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

export class IBiPoolManager__factory {
  static readonly abi = _abi;
  static createInterface(): IBiPoolManagerInterface {
    return new utils.Interface(_abi) as IBiPoolManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBiPoolManager {
    return new Contract(address, _abi, signerOrProvider) as IBiPoolManager;
  }
}
